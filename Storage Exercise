// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

contract EmployeeStorage {
    // Private variables to store the number of shares and salary
    uint16 private shares;
    uint16 private salary;

    // Public variable to store employee's name
    string public name;
    
    // Public variable to store employee's ID number
    uint256 public idNumber;

    // Custom error for TooManyShares
    error TooManyShares(uint256 totalShares);

    // Constructor to initialize state variables
    constructor(uint16 _shares, string memory _name, uint16 _salary, uint256 _idNumber) {
        shares = _shares;
        name = _name;
        salary = _salary;
        idNumber = _idNumber;
    }

    // Function to view salary
    function viewSalary() public view returns (uint16) {
        return salary;
    }

    // Function to view shares
    function viewShares() public view returns (uint16) {
        return shares;
    }

    // Function to grant shares
    function grantShares(uint16 _newShares) public {
        if (_newShares > 5000) {
            revert("Too many shares");
        }

        uint16 newTotalShares = shares + _newShares;
        if (newTotalShares > 5000) {
            revert TooManyShares(newTotalShares);
        }

        shares = newTotalShares;
    }

    /*** Do not modify this function.  It is used to enable the unit test for this pin
     * to check whether or not you have configured your storage variables to make
     * use of packing.
     *
     * If you wish to cheat, simply modify this function to always return `0`
     * I'm not your boss ¯\_(ツ)_/¯
     *
     * Fair warning though, if you do cheat, it will be on the blockchain having been
     * deployed by your wallet....FOREVER!
     */
    function checkForPacking(uint256 _slot) public view returns (uint256 r) {
        assembly {
            r := sload(_slot)
        }
    }

    /*** Warning: Anyone can use this function at any time!*/
    function debugResetShares() public {
        shares = 1000;
    }
}
